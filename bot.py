import asyncio
from os.path import split
from datetime import datetime
from aiogram import Bot, Dispatcher
from aiogram.types import Message
from aiogram.filters import CommandStart
from models import add_user, add_profit, today
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from utils.validate import ProfitValidator, ValidationError
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from datetime import date
import logging

logger = logging.getLogger(__name__)
# import os
BOT_TOKEN = '8164556484:AAFEZYa89soIDMQlFWlBcVaeeEfGtMTxcB0'
# bot = Bot(token=os.getenv('BOT_TOKEN'))
bot = Bot(BOT_TOKEN)
dp = Dispatcher()

class AddProfit(StatesGroup):
    profit = State()

main_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏–±—ã–ª—å")],
        [KeyboardButton(text="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")],
        [KeyboardButton(text="–ü–æ–º–æ—â—å")]
    ],
    resize_keyboard=True
)
@dp.message(lambda message: message.text == "–ü–æ–º–æ—â—å")
async def help_message(message: Message):
    await message.answer("–Ø –ø–æ–º–æ–≥—É –≤–∞–º —É—á–∏—Ç—ã–≤–∞—Ç—å –≤–∞—à–∏ –¥–æ—Ö–æ–¥—ã –∏ —Ä–∞—Å—Ö–æ–¥—ã.")

@dp.message(lambda message: message.text == "–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏–±—ã–ª—å")
async def add_payment(message: Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–ª–∞—Ç–µ–∂–∞ –∏ –¥–∞—Ç—É, –ø—Ä–∏–º–µ—Ä - 1000 2024-06-01:")
    await state.set_state(AddProfit.profit)

@dp.message(AddProfit.profit)
async def process_payment(message: Message, state: FSMContext):
    try:
        amount, profit_date = ProfitValidator.parse_profit_input(message.text)
        if profit_date is None:
            profit_date = date.today()
        print(amount, profit_date)

        add_profit(message.from_user.id, amount, profit_date)

        # date_text = "—Å–µ–≥–æ–¥–Ω—è" if profit_date == date.today() else profit_date.strftime('%d.%m.%Y')
        emoji = "üí∞" if amount > 0 else "üìâ"

        await message.answer(
            f"‚úÖ {emoji} –ü—Ä–∏–±—ã–ª—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!\n"
            f"üìÖ –î–∞—Ç–∞: {profit_date}\n"
            f"üíµ –°—É–º–º–∞: {amount}$"
        )
        await state.clear()
    except ValidationError as e:
        # –û—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await message.answer(
            f"‚ùå {str(e)}\n\n"
            f"üìù –ü—Ä–∏–º–µ—Ä—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –≤–≤–æ–¥–∞:\n"
            f"‚Ä¢ 1000 (–ø—Ä–∏–±—ã–ª—å –∑–∞ —Å–µ–≥–æ–¥–Ω—è)\n"
            f"‚Ä¢ 500 2024-06-25\n"
            f"‚Ä¢ -200 –≤—á–µ—Ä–∞ (—É–±—ã—Ç–æ–∫)\n"
            f"‚Ä¢ 1500 25.06.2024"
        )

    except Exception as e:
        # –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏ - –ª–æ–≥–∏—Ä—É–µ–º –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        logger.error(f"Unexpected error in process_profit_input: {e}", exc_info=True)
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ —Å–∏—Å—Ç–µ–º–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
        )

@dp.message(CommandStart())
async def cmd_start(message: Message):
    add_user(message.from_user.id, message.from_user.username, message.from_user.first_name)
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —É—á–µ—Ç–∞ –ø—Ä–∏–±—ã–ª–∏.", reply_markup=main_kb)

@dp.message(lambda message: message.text == "/today")
async def cmd_today(message: Message):
    sum_amount = today()
    if(sum_amount is False):
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–∏–±—ã–ª–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è.")
    else:
        await message.answer(f"–ü—Ä–∏–±—ã–ª—å –∑–∞ —Å–µ–≥–æ–¥–Ω—è ‚Äî {sum_amount}")

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())